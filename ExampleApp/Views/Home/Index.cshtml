@model Newtonsoft.Json.Schema.JSchema
@{
    ViewData["Title"] = "Home Page";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/8.6.5/jsoneditor.min.css" integrity="sha256-thQmdfrg82/N5u9ybMxam1RKdSfaxOPCgl5q9AI/mDI=" crossorigin="anonymous" />

<div id="jsoneditor" style="width: 100%; height: 600px;"></div>
<input type="button" value="register" id="registerBtn" />
<input type="button" value="start" id="startBtn" />
<input type="button" value="stop" id="stopBtn" />
<ul id="messages"></ul>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.3/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tinymce/5.2.1/tinymce.min.js" integrity="sha256-6Q5EaYOf1K2LsiwJmuGtmWHoT1X/kuXKnuZeGudWFB4=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/8.6.5/jsoneditor.min.js" integrity="sha256-wSC7O6XOfLcUshyeqXv+r8JrR2nn1O95z8s61JK7iTk=" crossorigin="anonymous"></script>
    <script type="text/javascript">

        (async function () {
            let json = "";
            document.getElementById("registerBtn").disabled = true;
            const schema = @Html.Raw(Model);
            const container = document.getElementById("jsoneditor");
            const options = {
                //schema: schema,
                mode: 'code'

            };
            const editor = new JSONEditor(container, options);



            var connection = new signalR.HubConnectionBuilder()
                .withUrl('http://localhost:50677/chathub')
                .configureLogging(signalR.LogLevel.Information)
                .withAutomaticReconnect()
                .build();

            await connection.start().then(function () {
                document.getElementById("registerBtn").disabled = false;
            }).catch(function (err) {
                return console.error(err.toString());
            });


            document.getElementById('registerBtn').addEventListener('click', async function () {
                json = editor.get();
                //let isValid = editor.validateSchema(json);
                //if (isValid) {
                //}
                await connection.invoke('RegisterProjectMessage', JSON.stringify(json))
                    .catch((err) => console.error(err.toString()));
            });

            connection.on('RegisterProjectReply', function (message) {
                var li = document.createElement('li');
                li.innerText = message;
                document.getElementById('messages').appendChild(li);
            });



            document.getElementById('startBtn').addEventListener('click', async function () {
                let id = json.id;
                await connection.invoke('StartProjectMessage', id)
                    .catch((err) => console.error(err.toString()));
            });



            document.getElementById('stopBtn').addEventListener('click', async function () {
                let id = json.id;
                await connection.invoke('StopProjectMessage', id)
                    .catch((err) => console.error(err.toString()));
            });



        })();
    </script>
}